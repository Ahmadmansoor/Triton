#!/usr/bin/env python2
## -*- coding: utf-8 -*-

import sys
import pprint

from triton              import *
from unicorn             import *
from unicorn.arm64_const import *

ADDR  = 0x100000
STACK = 0x200000
HEAP  = 0x300000
SIZE  = 5 * 1024 * 1024
CODE  = [
    ("\x80\x46\x82\xd2", "movz x0, #0x1234"),
    ("\x80\x46\xa2\xd2", "movz x0, #0x1234, lsl #16"),
    ("\x80\x46\xc2\xd2", "movz x0, #0x1234, lsl #32"),
    ("\x80\x46\xe2\xd2", "movz x0, #0x1234, lsl #48"),
    ("\x21\x64\x88\xd2", "movz x1, #0x4321"),
    ("\x21\x64\xa8\xd2", "movz x1, #0x4321, lsl #16"),
    ("\x21\x64\xc8\xd2", "movz x1, #0x4321, lsl #32"),
    ("\x21\x64\xe8\xd2", "movz x1, #0x4321, lsl #48"),
    ("\x21\x64\xe8\xd2", "movz x1, #0x4321, lsl #48"),
    ("\x21\x64\xc8\xd2", "movz x1, #0x4321, lsl #32"),
    ("\x21\x64\xa8\xd2", "movz x1, #0x4321, lsl #16"),

    ("\x21\x64\x88\xf2", "movk x1, #0x4321"),
    ("\x81\x46\xa2\xf2", "movk x1, #0x1234, lsl #16"),
    ("\x81\x04\xcf\xf2", "movk x1, #0x7824, lsl #32"),
    ("\x61\x8a\xf2\xf2", "movk x1, #0x9453, lsl #48"),

    ("\xe0\xcc\x8c\x52", "movz w0, #0x6667"),
    ("\xc0\xcc\xac\x72", "movk w0, #0x6666, lsl #16"),

    ("\x1f\x20\x03\xd5", "nop"),
    ("\x1f\x20\x03\xd5", "nop"),
    ("\x1f\x20\x03\xd5", "nop"),

    ("\x60\x00\x02\x8b", "add x0, x3, x2"),
    ("\x20\x00\x02\x8b", "add x0, x1, x2"),
    ("\x80\x46\xa2\xd2", "movz x0, #0x1234, lsl #16"),
    ("\x00\x00\x00\x8b", "add x0, x0, x0"),
    ("\x60\xc0\x22\x8b", "add x0, x3, w2, sxtw"),
    ("\x82\x46\x82\xd2", "movz x2, #0x1234"),
    ("\x01\xcf\x8a\xd2", "movz x1, #0x5678"),
    ("\x20\x80\x22\x8b", "add x0, x1, w2, sxtb"),
    ("\x20\xa0\x22\x8b", "add x0, x1, w2, sxth"),
    ("\x20\xc0\x22\x8b", "add x0, x1, w2, sxtw"),
    ("\x20\xe0\x22\x8b", "add x0, x1, x2, sxtx"),
    ("\x20\x00\x02\x8b", "add x0, x1, x2, lsl #0"),
    ("\x20\x04\x02\x8b", "add x0, x1, x2, lsl #1"),
    ("\x20\x20\x02\x8b", "add x0, x1, x2, lsl #8"),
    ("\x20\x40\x02\x8b", "add x0, x1, x2, lsl #16"),
    ("\x20\x80\x02\x8b", "add x0, x1, x2, lsl #32"),
    ("\x20\x84\x02\x8b", "add x0, x1, x2, lsl #33"),
    ("\x20\x88\x02\x8b", "add x0, x1, x2, lsl #34"),
    ("\x20\x00\x42\x8b", "add x0, x1, x2, lsr #0"),
    ("\x20\x04\x42\x8b", "add x0, x1, x2, lsr #1"),
    ("\x20\x20\x42\x8b", "add x0, x1, x2, lsr #8"),
    ("\x20\x40\x42\x8b", "add x0, x1, x2, lsr #16"),
    ("\x20\x80\x42\x8b", "add x0, x1, x2, lsr #32"),
    ("\x20\x84\x42\x8b", "add x0, x1, x2, lsr #33"),
    ("\x20\x88\x42\x8b", "add x0, x1, x2, lsr #34"),
    ("\x20\x20\x82\x8b", "add x0, x1, x2, asr #8"),
    ("\x20\x40\x82\x8b", "add x0, x1, x2, asr #16"),
    ("\x20\x80\x82\x8b", "add x0, x1, x2, asr #32"),
    ("\x20\x84\x82\x8b", "add x0, x1, x2, asr #33"),
    ("\x20\x88\x82\x8b", "add x0, x1, x2, asr #34"),
    ("\x20\x88\x82\x8b", "add x0, x1, x2, asr #34"),
    ("\x20\x88\x19\x91", "add x0, x1, #1634"),
    ("\x20\x58\x21\x91", "add x0, x1, #2134"),
    ("\x20\x58\x61\x91", "add x0, x1, #2134, lsl #12"),
    ("\x3f\x60\x22\x8b", "add sp, x1, x2"),

    ("\x60\x00\x02\xab", "adds x0, x3, x2"),
    ("\x20\x00\x02\xab", "adds x0, x1, x2"),
    ("\x80\x46\xa2\xd2", "movz x0, #0x1234, lsl #16"),
    ("\x00\x00\x00\xab", "adds x0, x0, x0"),
    ("\x60\xc0\x22\xab", "adds x0, x3, w2, sxtw"),
    ("\x82\x46\x82\xd2", "movz x2, #0x1234"),
    ("\x01\xcf\x8a\xd2", "movz x1, #0x5678"),
    ("\x20\x80\x22\xab", "adds x0, x1, w2, sxtb"),
    ("\x20\xa0\x22\xab", "adds x0, x1, w2, sxth"),
    ("\x20\xc0\x22\xab", "adds x0, x1, w2, sxtw"),
    ("\x20\xe0\x22\xab", "adds x0, x1, x2, sxtx"),
    ("\x20\x00\x02\xab", "adds x0, x1, x2, lsl #0"),
    ("\x20\x04\x02\xab", "adds x0, x1, x2, lsl #1"),
    ("\x20\x20\x02\xab", "adds x0, x1, x2, lsl #8"),
    ("\x20\x40\x02\xab", "adds x0, x1, x2, lsl #16"),
    ("\x20\x80\x02\xab", "adds x0, x1, x2, lsl #32"),
    ("\x20\x84\x02\xab", "adds x0, x1, x2, lsl #33"),
    ("\x20\x88\x02\xab", "adds x0, x1, x2, lsl #34"),
    ("\x20\x00\x42\xab", "adds x0, x1, x2, lsr #0"),
    ("\x20\x04\x42\xab", "adds x0, x1, x2, lsr #1"),
    ("\x20\x20\x42\xab", "adds x0, x1, x2, lsr #8"),
    ("\x20\x40\x42\xab", "adds x0, x1, x2, lsr #16"),
    ("\x20\x80\x42\xab", "adds x0, x1, x2, lsr #32"),
    ("\x20\x84\x42\xab", "adds x0, x1, x2, lsr #33"),
    ("\x20\x88\x42\xab", "adds x0, x1, x2, lsr #34"),
    ("\x20\x20\x82\xab", "adds x0, x1, x2, asr #8"),
    ("\x20\x40\x82\xab", "adds x0, x1, x2, asr #16"),
    ("\x20\x80\x82\xab", "adds x0, x1, x2, asr #32"),
    ("\x20\x84\x82\xab", "adds x0, x1, x2, asr #33"),
    ("\x20\x88\x82\xab", "adds x0, x1, x2, asr #34"),
    ("\x20\x88\x82\xab", "adds x0, x1, x2, asr #34"),
    ("\x20\x88\x19\xb1", "adds x0, x1, #1634"),
    ("\x20\x58\x21\xb1", "adds x0, x1, #2134"),
    ("\x20\x58\x61\xb1", "adds x0, x1, #2134, lsl #12"),
    ("\x00\x00\x00\xab", "adds x0, x0, x0"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x00\x04\x00\xb1", "adds x0, x0, #1"),

    ("\x20\x00\x02\x9a", "adc x0, x1, x2"),
    ("\x20\x00\x02\x1a", "adc w0, w1, w2"),

    ("\x20\x1a\x09\x30", "adr x0, #0x12345"),
    ("\xe1\xff\x7f\x70", "adr x1, #0xfffff"),

    ("\xc1\x7c\x00\xd0", "adrp x1, #0xf9a000"),
    ("\x41\x0c\x00\xf0", "adrp x1, #0x18b000"),

    ("\xe1\xff\x9f\xd2", "movz x1, #0xffff"),
    ("\x22\x00\x80\xd2", "movz x2, #0x1"),
    ("\x20\x1c\x40\x92", "and x0, x1, #0xff"),
    ("\x20\x00\x40\x92", "and x0, x1, #0x01"),
    ("\x20\x00\x7c\x92", "and x0, x1, #0x10"),
    ("\x20\x00\x02\x8a", "and x0, x1, x2"),
    ("\x20\x04\x02\x8a", "and x0, x1, x2, lsl #1"),
    ("\x20\x08\x02\x8a", "and x0, x1, x2, lsl #2"),
    ("\x20\x0c\x02\x8a", "and x0, x1, x2, lsl #3"),
    ("\x20\x10\x02\x8a", "and x0, x1, x2, lsl #4"),
    ("\x20\x1c\x40\xf2", "ands x0, x1, #0xff"),
    ("\x20\x00\x40\xf2", "ands x0, x1, #0x01"),
    ("\x20\x00\x7c\xf2", "ands x0, x1, #0x10"),
    ("\x20\x00\x02\xea", "ands x0, x1, x2"),
    ("\x20\x04\x02\xea", "ands x0, x1, x2, lsl #1"),
    ("\x20\x08\x02\xea", "ands x0, x1, x2, lsl #2"),
    ("\x20\x0c\x02\xea", "ands x0, x1, x2, lsl #3"),
    ("\x20\x10\x02\xea", "ands x0, x1, x2, lsl #4"),
    ("\x3f\x1c\x40\xf2", "tst x1, #0xff"),
    ("\x3f\x00\x40\xf2", "tst x1, #0x01"),
    ("\x3f\x00\x7c\xf2", "tst x1, #0x10"),
    ("\x3f\x00\x02\xea", "tst x1, x2"),
    ("\x3f\x04\x02\xea", "tst x1, x2, lsl #1"),
    ("\x3f\x08\x02\xea", "tst x1, x2, lsl #2"),
    ("\x3f\x0c\x02\xea", "tst x1, x2, lsl #3"),
    ("\x3f\x10\x02\xea", "tst x1, x2, lsl #4"),

    ("\x20\xfc\x41\x93", "asr x0, x1, #1"),
    ("\x20\xfc\x42\x93", "asr x0, x1, #2"),
    ("\x20\xfc\x43\x93", "asr x0, x1, #3"),
    ("\x20\xfc\x44\x93", "asr x0, x1, #4"),
    ("\x20\xfc\x44\x93", "asr x0, x1, #4"),
    ("\x20\xfc\x7f\x93", "asr x0, x1, #63"),
    ("\xe1\xff\x9f\xd2", "movz x1, #0xffff"),
    ("\x22\x00\x80\xd2", "movz x2, #0x1"),
    ("\x20\x28\xc2\x9a", "asr x0, x1, x2"),
    ("\x42\x00\x80\xd2", "movz x2, #0x2"),
    ("\x20\x28\xc2\x9a", "asr x0, x1, x2"),

    ("\x82\x46\x82\xd2", "movz x2, #0x1234"),
    ("\x01\xcf\x8a\xd2", "movz x1, #0x5678"),
    ("\x20\x80\x22\xcb", "sub x0, x1, w2, sxtb"),
    ("\x20\xa0\x22\xcb", "sub x0, x1, w2, sxth"),
    ("\x20\xc0\x22\xcb", "sub x0, x1, w2, sxtw"),
    ("\x20\xe0\x22\xcb", "sub x0, x1, x2, sxtx"),
    ("\x20\x00\x02\xcb", "sub x0, x1, x2, lsl #0"),
    ("\x20\x04\x02\xcb", "sub x0, x1, x2, lsl #1"),
    ("\x20\x20\x02\xcb", "sub x0, x1, x2, lsl #8"),
    ("\x20\x40\x02\xcb", "sub x0, x1, x2, lsl #16"),
    ("\x20\x80\x02\xcb", "sub x0, x1, x2, lsl #32"),
    ("\x20\x84\x02\xcb", "sub x0, x1, x2, lsl #33"),
    ("\x20\x88\x02\xcb", "sub x0, x1, x2, lsl #34"),
    ("\x20\x00\x42\xcb", "sub x0, x1, x2, lsr #0"),
    ("\x20\x04\x42\xcb", "sub x0, x1, x2, lsr #1"),
    ("\x20\x20\x42\xcb", "sub x0, x1, x2, lsr #8"),
    ("\x20\x40\x42\xcb", "sub x0, x1, x2, lsr #16"),
    ("\x20\x80\x42\xcb", "sub x0, x1, x2, lsr #32"),
    ("\x20\x84\x42\xcb", "sub x0, x1, x2, lsr #33"),
    ("\x20\x88\x42\xcb", "sub x0, x1, x2, lsr #34"),
    ("\x20\x20\x82\xcb", "sub x0, x1, x2, asr #8"),
    ("\x20\x40\x82\xcb", "sub x0, x1, x2, asr #16"),
    ("\x20\x80\x82\xcb", "sub x0, x1, x2, asr #32"),
    ("\x20\x84\x82\xcb", "sub x0, x1, x2, asr #33"),
    ("\x20\x88\x82\xcb", "sub x0, x1, x2, asr #34"),
    ("\x20\x88\x82\xcb", "sub x0, x1, x2, asr #34"),
    ("\x20\x88\x19\xd1", "sub x0, x1, #1634"),
    ("\x20\x58\x21\xd1", "sub x0, x1, #2134"),
    ("\x20\x58\x61\xd1", "sub x0, x1, #2134, lsl #12"),

    ("\x82\x46\x82\xd2", "movz x2, #0x1234"),
    ("\x01\xcf\x8a\xd2", "movz x1, #0x5678"),
    ("\x20\x80\x22\xeb", "subs x0, x1, w2, sxtb"),
    ("\x20\xa0\x22\xeb", "subs x0, x1, w2, sxth"),
    ("\x20\xc0\x22\xeb", "subs x0, x1, w2, sxtw"),
    ("\x20\xe0\x22\xeb", "subs x0, x1, x2, sxtx"),
    ("\x20\x00\x02\xeb", "subs x0, x1, x2, lsl #0"),
    ("\x20\x04\x02\xeb", "subs x0, x1, x2, lsl #1"),
    ("\x20\x20\x02\xeb", "subs x0, x1, x2, lsl #8"),
    ("\x20\x40\x02\xeb", "subs x0, x1, x2, lsl #16"),
    ("\x20\x80\x02\xeb", "subs x0, x1, x2, lsl #32"),
    ("\x20\x84\x02\xeb", "subs x0, x1, x2, lsl #33"),
    ("\x20\x88\x02\xeb", "subs x0, x1, x2, lsl #34"),
    ("\x20\x00\x42\xeb", "subs x0, x1, x2, lsr #0"),
    ("\x20\x04\x42\xeb", "subs x0, x1, x2, lsr #1"),
    ("\x20\x20\x42\xeb", "subs x0, x1, x2, lsr #8"),
    ("\x20\x40\x42\xeb", "subs x0, x1, x2, lsr #16"),
    ("\x20\x80\x42\xeb", "subs x0, x1, x2, lsr #32"),
    ("\x20\x84\x42\xeb", "subs x0, x1, x2, lsr #33"),
    ("\x20\x88\x42\xeb", "subs x0, x1, x2, lsr #34"),
    ("\x20\x20\x82\xeb", "subs x0, x1, x2, asr #8"),
    ("\x20\x40\x82\xeb", "subs x0, x1, x2, asr #16"),
    ("\x20\x80\x82\xeb", "subs x0, x1, x2, asr #32"),
    ("\x20\x84\x82\xeb", "subs x0, x1, x2, asr #33"),
    ("\x20\x88\x82\xeb", "subs x0, x1, x2, asr #34"),
    ("\x20\x88\x82\xeb", "subs x0, x1, x2, asr #34"),
    ("\x20\x88\x19\xf1", "subs x0, x1, #1634"),
    ("\x20\x58\x21\xf1", "subs x0, x1, #2134"),
    ("\x20\x58\x61\xf1", "subs x0, x1, #2134, lsl #12"),

    ("\x20\x00\x02\xca", "eor x0, x1, x2, lsl #0"),
    ("\x20\x04\x02\xca", "eor x0, x1, x2, lsl #1"),
    ("\x20\x20\x02\xca", "eor x0, x1, x2, lsl #8"),
    ("\x20\x40\x02\xca", "eor x0, x1, x2, lsl #16"),
    ("\x20\x80\x02\xca", "eor x0, x1, x2, lsl #32"),
    ("\x20\x84\x02\xca", "eor x0, x1, x2, lsl #33"),
    ("\x20\x88\x02\xca", "eor x0, x1, x2, lsl #34"),
    ("\x20\x00\x42\xca", "eor x0, x1, x2, lsr #0"),
    ("\x20\x04\x42\xca", "eor x0, x1, x2, lsr #1"),
    ("\x20\x20\x42\xca", "eor x0, x1, x2, lsr #8"),
    ("\x20\x40\x42\xca", "eor x0, x1, x2, lsr #16"),
    ("\x20\x80\x42\xca", "eor x0, x1, x2, lsr #32"),
    ("\x20\x84\x42\xca", "eor x0, x1, x2, lsr #33"),
    ("\x20\x88\x42\xca", "eor x0, x1, x2, lsr #34"),
    ("\x20\x20\x82\xca", "eor x0, x1, x2, asr #8"),
    ("\x20\x40\x82\xca", "eor x0, x1, x2, asr #16"),
    ("\x20\x80\x82\xca", "eor x0, x1, x2, asr #32"),
    ("\x20\x84\x82\xca", "eor x0, x1, x2, asr #33"),
    ("\x20\x88\x82\xca", "eor x0, x1, x2, asr #34"),
    ("\x20\x88\x82\xca", "eor x0, x1, x2, asr #34"),
    ("\x20\x1c\x40\xd2", "eor x0, x1, #255"),
    ("\x20\x18\x40\xd2", "eor x0, x1, #0x7f"),
    ("\x20\x00\x40\xd2", "eor x0, x1, #1"),

    ("\x20\x00\x22\xca", "eon x0, x1, x2, lsl #0"),
    ("\x20\x04\x22\xca", "eon x0, x1, x2, lsl #1"),
    ("\x20\x20\x22\xca", "eon x0, x1, x2, lsl #8"),
    ("\x20\x40\x22\xca", "eon x0, x1, x2, lsl #16"),
    ("\x20\x80\x22\xca", "eon x0, x1, x2, lsl #32"),
    ("\x20\x84\x22\xca", "eon x0, x1, x2, lsl #33"),
    ("\x20\x88\x22\xca", "eon x0, x1, x2, lsl #34"),
    ("\x20\x00\x62\xca", "eon x0, x1, x2, lsr #0"),
    ("\x20\x04\x62\xca", "eon x0, x1, x2, lsr #1"),
    ("\x20\x20\x62\xca", "eon x0, x1, x2, lsr #8"),
    ("\x20\x40\x62\xca", "eon x0, x1, x2, lsr #16"),
    ("\x20\x80\x62\xca", "eon x0, x1, x2, lsr #32"),
    ("\x20\x84\x62\xca", "eon x0, x1, x2, lsr #33"),
    ("\x20\x88\x62\xca", "eon x0, x1, x2, lsr #34"),
    ("\x20\x20\xa2\xca", "eon x0, x1, x2, asr #8"),
    ("\x20\x40\xa2\xca", "eon x0, x1, x2, asr #16"),
    ("\x20\x80\xa2\xca", "eon x0, x1, x2, asr #32"),
    ("\x20\x84\xa2\xca", "eon x0, x1, x2, asr #33"),
    ("\x20\x88\xa2\xca", "eon x0, x1, x2, asr #34"),
    ("\x20\x88\xa2\xca", "eon x0, x1, x2, asr #34"),

    ("\x82\x46\x82\xd2", "movz x2, #0x1234"),
    ("\x01\xcf\x8a\xd2", "movz x1, #0x5678"),
    ("\x20\x00\x22\xaa", "orn x0, x1, x2"),
    ("\x40\x00\x21\xaa", "orn x0, x2, x1"),
    ("\x41\x00\x20\xaa", "orn x1, x2, x0"),
    ("\x01\x00\x22\xaa", "orn x1, x0, x2"),
    ("\x20\x04\x22\xaa", "orn x0, x1, x2, lsl #1"),
    ("\x20\x08\x22\xaa", "orn x0, x1, x2, lsl #2"),
    ("\x20\x0c\x22\xaa", "orn x0, x1, x2, lsl #3"),
    ("\x20\x04\xe2\xaa", "orn x0, x1, x2, ror #1"),
    ("\x20\x08\xe2\xaa", "orn x0, x1, x2, ror #2"),
    ("\x20\x0c\xe2\xaa", "orn x0, x1, x2, ror #3"),

    ("\x82\x46\x82\xd2", "movz x2, #0x1234"),
    ("\x01\xcf\x8a\xd2", "movz x1, #0x5678"),
    ("\x20\x00\x02\xaa", "orr x0, x1, x2"),
    ("\x40\x00\x01\xaa", "orr x0, x2, x1"),
    ("\x41\x00\x00\xaa", "orr x1, x2, x0"),
    ("\x01\x00\x02\xaa", "orr x1, x0, x2"),
    ("\x20\x04\x02\xaa", "orr x0, x1, x2, lsl #1"),
    ("\x20\x08\x02\xaa", "orr x0, x1, x2, lsl #2"),
    ("\x20\x0c\x02\xaa", "orr x0, x1, x2, lsl #3"),
    ("\x20\x04\xc2\xaa", "orr x0, x1, x2, ror #1"),
    ("\x20\x08\xc2\xaa", "orr x0, x1, x2, ror #2"),
    ("\x20\x0c\xc2\xaa", "orr x0, x1, x2, ror #3"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\x00\x40\xf9", "ldr x5, [x1]"),
    ("\x26\x04\x40\xf8", "ldr x6, [x1], #0"),
    ("\x27\x44\x40\xf8", "ldr x7, [x1], #4"),
    ("\x28\x68\x62\xf8", "ldr x8, [x1, x2]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\x24\x5e\xf8", "ldr x9, [x1], #-30"),
    ("\x2a\x8c\x40\xf8", "ldr x10, [x1, #8]!"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\x03\x40\xf9", "ldr x11, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\x00\x40\x39", "ldrb w5, [x1]"),
    ("\x26\x04\x40\x38", "ldrb w6, [x1], #0"),
    ("\x27\x44\x40\x38", "ldrb w7, [x1], #4"),
    ("\x28\x68\x62\x38", "ldrb w8, [x1, x2]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\x24\x5e\x38", "ldrb w9, [x1], #-30"),
    ("\x2a\x8c\x40\x38", "ldrb w10, [x1, #8]!"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\x03\x40\x39", "ldrb w11, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\x00\x40\x79", "ldrh w5, [x1]"),
    ("\x26\x04\x40\x78", "ldrh w6, [x1], #0"),
    ("\x27\x44\x40\x78", "ldrh w7, [x1], #4"),
    ("\x28\x68\x62\x78", "ldrh w8, [x1, x2]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\x24\x5e\x78", "ldrh w9, [x1], #-30"),
    ("\x2a\x8c\x40\x78", "ldrh w10, [x1, #8]!"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\x03\x40\x79", "ldrh w11, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x24\x14\x40\xa9", "ldp x4, x5, [x1]"),
    ("\x25\x18\xc0\xa8", "ldp x5, x6, [x1], #0"),
    ("\x26\x9c\xc0\xa8", "ldp x6, x7, [x1], #8"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x28\x24\xfe\xa8", "ldp x8, x9, [x1], #-32"),
    ("\x29\x28\xc1\xa9", "ldp x9, x10, [x1, #16]!"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xea\x2f\x40\xa9", "ldp x10, x11, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x24\x14\x40\x29", "ldp w4, w5, [x1]"),
    ("\x25\x18\xc0\x28", "ldp w5, w6, [x1], #0"),
    ("\x26\x1c\xc1\x28", "ldp w6, w7, [x1], #8"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x28\x24\xfc\x28", "ldp w8, w9, [x1], #-32"),
    ("\x29\x28\xc2\x29", "ldp w9, w10, [x1, #16]!"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xea\x2f\x40\x29", "ldp w10, w11, [sp]"),

    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x21\x30\x00\x91", "add x1, x1, #12"), # STACK+12
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x10\x40\xf8", "ldur x0, [x1, #1]"),
    ("\x20\x20\x40\xf8", "ldur x0, [x1, #2]"),
    ("\x20\x30\x40\xf8", "ldur x0, [x1, #3]"),
    ("\x20\x40\x40\xf8", "ldur x0, [x1, #4]"),
    ("\x20\xf0\x5f\xf8", "ldur x0, [x1, #-1]"),
    ("\x20\xe0\x5f\xf8", "ldur x0, [x1, #-2]"),
    ("\x20\xd0\x5f\xf8", "ldur x0, [x1, #-3]"),
    ("\x20\xc0\x5f\xf8", "ldur x0, [x1, #-4]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x40\x38", "ldurb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x10\x40\x38", "ldurb w0, [x1, #1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x20\x40\x38", "ldurb w0, [x1, #2]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x30\x40\x38", "ldurb w0, [x1, #3]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x40\x40\x38", "ldurb w0, [x1, #4]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xf0\x5f\x38", "ldurb w0, [x1, #0xffffffffffffffff]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xe0\x5f\x38", "ldurb w0, [x1, #0xfffffffffffffffe]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xd0\x5f\x38", "ldurb w0, [x1, #0xfffffffffffffffd]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xc0\x5f\x38", "ldurb w0, [x1, #0xfffffffffffffffc]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x40\x78", "ldurh w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x10\x40\x78", "ldurh w0, [x1, #1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x20\x40\x78", "ldurh w0, [x1, #2]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x30\x40\x78", "ldurh w0, [x1, #3]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x40\x40\x78", "ldurh w0, [x1, #4]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xf0\x5f\x78", "ldurh w0, [x1, #0xffffffffffffffff]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xe0\x5f\x78", "ldurh w0, [x1, #0xfffffffffffffffe]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xd0\x5f\x78", "ldurh w0, [x1, #0xfffffffffffffffd]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\xc0\x5f\x78", "ldurh w0, [x1, #0xfffffffffffffffc]"),

    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x21\x30\x00\x91", "add x1, x1, #12"), # STACK+12
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x38", "ldursb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x38", "ldursb x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x38", "ldursb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x78", "ldursh w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x78", "ldursh x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\xb8", "ldursw x0, [x1]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x38", "ldursb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x38", "ldursb x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x38", "ldursb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x78", "ldursh w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x78", "ldursh x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\xb8", "ldursw x0, [x1]"),

    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x21\x30\x00\x91", "add x1, x1, #12"), # STACK+12
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x39", "ldrsb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x39", "ldrsb x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x39", "ldrsb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x79", "ldrsh w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x79", "ldrsh x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\xb9", "ldrsw x0, [x1]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x39", "ldrsb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x39", "ldrsb x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x39", "ldrsb w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\xc0\x79", "ldrsh w0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\x79", "ldrsh x0, [x1]"),
    ("\x20\x00\x40\xf8", "ldur x0, [x1]"),
    ("\x20\x00\x80\xb9", "ldrsw x0, [x1]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x06\xa0\xd2", "movz x2, #0x30, lsl #16"), # HEAP address
    ("\x42\x78\x00\x91", "add x2, x2, #30"),
    ("\x23\x00\x40\xf8", "ldur x3, [x1]"),
    ("\x44\x00\x40\xf8", "ldur x4, [x2]"),
    ("\x60\x00\xc4\x93", "extr x0, x3, x4, #0"),
    ("\x60\x04\xc4\x93", "extr x0, x3, x4, #1"),
    ("\x60\x08\xc4\x93", "extr x0, x3, x4, #2"),
    ("\x60\x0c\xc4\x93", "extr x0, x3, x4, #2"),
    ("\x60\x78\xc4\x93", "extr x0, x3, x4, #30"),
    ("\x60\xfc\xc4\x93", "extr x0, x3, x4, #63"),
    ("\x60\x00\x84\x13", "extr w0, w3, w4, #0"),
    ("\x60\x04\x84\x13", "extr w0, w3, w4, #1"),
    ("\x60\x08\x84\x13", "extr w0, w3, w4, #2"),
    ("\x60\x0c\x84\x13", "extr w0, w3, w4, #3"),
    ("\x60\x7c\x84\x13", "extr w0, w3, w4, #31"),

    ("\x01\x00\x00\x14", "b #4"),
    #("\x02\x00\x00\x14", "b #8"),          # FIXME cannot handle this with
    #("\x03\x00\x00\x14", "b #12"),         # unicorn emulating only one
    #("\x00\xd0\x48\x14", "b #0x1234000"),  # instruction...
    #("\x74\xbb\xff\x17", "b #-0x11230"),   #
    ("\x20\x00\x00\x54" ,"b.eq #4"),
    #("\x40\x00\x00\x54" ,"b.eq #8"),
    ("\x01\x00\x00\x94" ,"bl #4"),

    ("\x80\x0c\x90\xb7", "tbnz x0, #0x32, #0x190"),
    ("\x20\x00\x90\xb6", "tbz x0, #0x32, #4"),

    ("\x01\x00\x80\xd2", "movz x1, #0"),
    ("\x02\x06\xa0\xd2", "movz x2, #0x20, lsl #16"), # STACK address
    ("\xe1\x03\x02\xaa", "mov x1, x2"),
    ("\x3f\x00\x00\x91", "mov sp, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xe0\x03\x21\xaa", "mvn x0, x1"),
    ("\xe0\x03\x01\xcb", "neg x0, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x63\xa0\x84\xd2", "movz x3, #9475"),
    ("\x20\x0c\x02\x9b", "madd x0, x1, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),
    ("\x00\x0c\x02\x9b", "madd x0, x0, x2, x3"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\x7c\x02\x9b", "mul x0, x1, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),
    ("\x00\x7c\x02\x9b", "mul x0, x0, x2"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x63\xa0\x84\xd2", "movz x3, #9475"),
    ("\x20\x8c\x02\x9b", "msub x0, x1, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),
    ("\x00\x8c\x02\x9b", "msub x0, x0, x2, x3"),


    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\xfc\x02\x9b", "mneg x0, x1, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),
    ("\x00\xfc\x02\x9b", "mneg x0, x0, x2"),

    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),
    ("\x00\xfc\x02\x1b", "mneg w0, w0, w2"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x63\xa0\x84\xd2", "movz x3, #9475"),
    ("\x64\xa0\x84\xd2", "movz x4, #9475"),
    ("\xe5\x24\x81\xd2", "movz x5, #2343"),
    ("\xa6\xaf\x81\xd2", "movz x6, #3453"),
    ("\x87\x3a\x82\xd2", "movz x7, #4564"),
    ("\xe8\x16\x84\xd2", "movz x8, #8375"),
    ("\xe9\xc1\x84\xd2", "movz x9, #9743"),
    ("\xea\xaa\x82\xd2", "movz x10, #5463"),
    ("\x2b\xf8\x80\xd2", "movz x11, #1985"),
    ("\x25\x00\x00\xf9", "str x5, [x1]"),
    ("\x26\x04\x00\xf8", "str x6, [x1], #0"),
    ("\x27\x44\x00\xf8", "str x7, [x1], #4"),
    ("\x28\x68\x22\xf8", "str x8, [x1, x2]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\x24\x1e\xf8", "str x9, [x1], #-30"),
    ("\x2a\x8c\x00\xf8", "str x10, [x1, #8]!"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\x03\x00\xf9", "str x11, [sp]"),
    ("\x25\x00\x00\xf8", "stur x5, [x1]"),
    ("\x26\x00\x00\x38", "sturb w6, [x1]"),
    ("\x27\x00\x00\x78", "sturh w7, [x1]"),
    ("\x29\x00\x00\xf9", "str x9, [x1]"),
    ("\x2a\x00\x00\x39", "strb w10, [x1]"),
    ("\x2b\x00\x00\x79", "strh w11, [x1]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\xe5\x24\x81\xd2", "movz x5, #2343"),
    ("\xa6\xaf\x81\xd2", "movz x6, #3453"),
    ("\x87\x3a\x82\xd2", "movz x7, #4564"),
    ("\xe8\x16\x84\xd2", "movz x8, #8375"),
    ("\xe9\xc1\x84\xd2", "movz x9, #9743"),
    ("\xea\xaa\x82\xd2", "movz x10, #5463"),
    ("\x25\x18\x00\xa9", "stp x5, x6, [x1]"),
    ("\x27\x20\x80\xa8", "stp x7, x8, [x1], #0"),
    ("\x29\xa8\x80\xa8", "stp x9, x10, [x1], #8"),
    ("\x25\x20\x82\xa9", "stp x5, x8, [x1, #32]!"),
    ("\x26\x1c\x01\xa9", "stp x6, x7, [x1, #16]"),
    ("\x25\x18\x00\x29", "stp w5, w6, [x1]"),
    ("\x27\x20\x80\x28", "stp w7, w8, [x1], #0"),
    ("\x29\x28\x81\x28", "stp w9, w10, [x1], #8"),
    ("\x25\x20\x84\x29", "stp w5, w8, [x1, #32]!"),
    ("\x26\x1c\x02\x29", "stp w6, w7, [x1, #16]"),

    ("\xc1\xbd\x9b\xd2", "movz x1, #0xddee"),
    ("\x20\x1c\x40\x93", "sxtb x0, x1"),
    ("\x20\x3c\x40\x93", "sxth x0, x1"),
    ("\x20\x7c\x40\x93", "sxtw x0, x1"),
    ("\x20\x1c\x00\x53", "uxtb w0, w1"),
    ("\x20\x3c\x00\x53", "uxth w0, w1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\x00\x82\x9a", "csel x0, x1, x2, eq"),
    ("\x40\x00\x81\x9a", "csel x0, x2, x1, eq"),
    ("\x20\x10\x82\x9a", "csel x0, x1, x2, ne"),
    ("\x40\x10\x81\x9a", "csel x0, x2, x1, ne"),

    ("\x20\x04\x82\x9a", "csinc x0, x1, x2, eq"),
    ("\x40\x04\x81\x9a", "csinc x0, x2, x1, eq"),
    ("\x20\x14\x82\x9a", "csinc x0, x1, x2, ne"),
    ("\x40\x14\x81\x9a", "csinc x0, x2, x1, ne"),

    ("\x20\x04\x82\xda", "csneg x0, x1, x2, eq"),
    ("\x40\x04\x81\xda", "csneg x0, x2, x1, eq"),
    ("\x20\x14\x82\xda", "csneg x0, x1, x2, ne"),
    ("\x40\x14\x81\xda", "csneg x0, x2, x1, ne"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\x20\xf8\x7f\xd3", "lsl x0, x1, #1"),
    ("\x20\xf4\x7e\xd3", "lsl x0, x1, #2"),
    ("\x20\xf0\x7d\xd3", "lsl x0, x1, #3"),
    ("\x20\xec\x7c\xd3", "lsl x0, x1, #4"),
    ("\x20\xfc\x41\xd3", "lsr x0, x1, #1"),
    ("\x20\xfc\x42\xd3", "lsr x0, x1, #2"),
    ("\x20\xfc\x43\xd3", "lsr x0, x1, #3"),
    ("\x20\xfc\x44\xd3", "lsr x0, x1, #4"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\x20\xc2\x9a", "lsl x0, x1, x2"),
    ("\x20\x24\xc2\x9a", "lsr x0, x1, x2"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x3f\x00\x02\xeb", "cmp x1, x2"),
    ("\x5f\x00\x01\xeb", "cmp x2, x1"),
    ("\x01\x00\x80\xd2", "movz x1, #0"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x3f\x00\x02\xeb", "cmp x1, x2"),
    ("\x5f\x00\x01\xeb", "cmp x2, x1"),
    ("\x01\x00\x80\xd2", "movz x1, #0"),
    ("\x02\x00\x80\xd2", "movz x2, #0"),
    ("\x3f\x00\x02\xeb", "cmp x1, x2"),
    ("\x5f\x00\x01\xeb", "cmp x2, x1"),
    ("\xc1\x88\x83\xd2", "movz x1, #7238"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x3f\x00\x02\xeb", "cmp x1, x2"),
    ("\x5f\x00\x01\xeb", "cmp x2, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x3f\x00\x02\xab", "cmn x1, x2"),
    ("\x5f\x00\x01\xab", "cmn x2, x1"),
    ("\x01\x00\x80\xd2", "movz x1, #0"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x3f\x00\x02\xab", "cmn x1, x2"),
    ("\x5f\x00\x01\xab", "cmn x2, x1"),
    ("\x01\x00\x80\xd2", "movz x1, #0"),
    ("\x02\x00\x80\xd2", "movz x2, #0"),
    ("\x3f\x00\x02\xab", "cmn x1, x2"),
    ("\x5f\x00\x01\xab", "cmn x2, x1"),
    ("\xc1\x88\x83\xd2", "movz x1, #7238"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x3f\x00\x02\xab", "cmn x1, x2"),
    ("\x5f\x00\x01\xab", "cmn x2, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x63\xa0\x84\xd2", "movz x3, #9475"),
    ("\x20\x0c\xa2\x9b", "umaddl x0, w1, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),
    ("\x00\x0c\xa2\x9b", "umaddl x0, w0, w2, x3"),

    ("\x20\x8c\xa2\x9b", "umsubl x0, w1, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),
    ("\x00\x8c\xa2\x9b", "umsubl x0, w0, w2, x3"),

    ("\xc1\xfd\xbf\xd2", "movz x1, #0xffee, lsl #16"),
    ("\x42\xd5\xbd\xd2", "movz x2, #0xeeaa, lsl #16"),
    ("\xa3\xd5\x9b\xd2", "movz x3, #0xdead"),
    ("\x20\x0c\x22\x9b", "smaddl x0, w1, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),
    ("\x00\x0c\x22\x9b", "smaddl x0, w0, w2, x3"),

    ("\xc1\xfd\xbf\xd2", "movz x1, #0xffee, lsl #16"),
    ("\x42\xd5\xbd\xd2", "movz x2, #0xeeaa, lsl #16"),
    ("\xa3\xd5\x9b\xd2", "movz x3, #0xdead"),
    ("\x20\x8c\x22\x9b", "smsubl x0, w1, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),
    ("\x00\x8c\x22\x9b", "smsubl x0, w0, w2, x3"),

    ("\xc1\xfd\xbf\xd2", "movz x1, #0xffee, lsl #16"),
    ("\x42\xd5\xbd\xd2", "movz x2, #0xeeaa, lsl #16"),
    ("\x20\x7c\x22\x9b", "smull x0, w1, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),
    ("\x00\x7c\x22\x9b", "smull x0, w0, w2"),

    ("\xc1\xfd\xbf\xd2", "movz x1, #0xffee, lsl #16"),
    ("\x42\xd5\xbd\xd2", "movz x2, #0xeeaa, lsl #16"),
    ("\x20\x7c\x42\x9b", "smulh x0, x1, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),
    ("\x00\x7c\x42\x9b", "smulh x0, x0, x2"),

    ("\x01\x06\xa0\x92", "movn x1, #0x30, lsl #16"),
    ("\x02\x02\x80\x92", "movn x2, #16"),
    ("\x63\xa0\x84\x92", "movn x3, #9475"),
    ("\x64\xa0\x84\x92", "movn x4, #9475"),
    ("\xe5\x24\x81\x92", "movn x5, #2343"),
    ("\xa6\xaf\x81\x92", "movn x6, #3453"),
    ("\x87\x3a\x82\x92", "movn x7, #4564"),
    ("\xe8\x16\x84\x92", "movn x8, #8375"),
    ("\xe9\xc1\x84\x92", "movn x9, #9743"),
    ("\xea\xaa\x82\x92", "movn x10, #5463"),
    ("\x2b\xf8\x80\x92", "movn x11, #1985"),

    ("\xc1\xfd\xff\xd2", "movz x1, #0xffee, lsl #48"),
    ("\x81\xb9\xdb\xf2", "movk x1, #0xddcc, lsl #32"),
    ("\x41\x75\xb7\xf2", "movk x1, #0xbbaa, lsl #16"),
    ("\x01\x31\x93\xf2", "movk x1, #0x9988"),
    ("\x20\x00\x40\xd3", "ubfx x0, x1, #0, #1"),
    ("\x20\x08\x40\xd3", "ubfx x0, x1, #0, #3"),
    ("\x20\x0c\x40\xd3", "ubfx x0, x1, #0, #4"),
    ("\x20\x10\x40\xd3", "ubfx x0, x1, #0, #5"),
    ("\x20\x78\x40\xd3", "ubfx x0, x1, #0, #31"),
    ("\x20\xf8\x40\xd3", "ubfx x0, x1, #0, #63"),
    ("\x20\xfc\x40\xd3", "ubfx x0, x1, #0, #64"),
    ("\x20\xfc\x41\xd3", "ubfx x0, x1, #1, #63"),
    ("\x20\xfc\x42\xd3", "ubfx x0, x1, #2, #62"),
    ("\x20\xfc\x43\xd3", "ubfx x0, x1, #3, #61"),
    ("\x20\xfc\x60\xd3", "ubfx x0, x1, #32, #32"),
    ("\x20\x4c\x4a\xd3", "ubfx x0, x1, #10, #10"),

    ("\xc1\xfd\xff\xd2", "movz x1, #0xffee, lsl #48"),
    ("\x81\xb9\xdb\xf2", "movk x1, #0xddcc, lsl #32"),
    ("\x41\x75\xb7\xf2", "movk x1, #0xbbaa, lsl #16"),
    ("\x01\x31\x93\xf2", "movk x1, #0x9988"),
    ("\x20\x00\x40\x93", "sbfx x0, x1, #0, #1"),
    ("\x20\x08\x40\x93", "sbfx x0, x1, #0, #3"),
    ("\x20\x0c\x40\x93", "sbfx x0, x1, #0, #4"),
    ("\x20\x10\x40\x93", "sbfx x0, x1, #0, #5"),
    ("\x20\x78\x40\x93", "sbfx x0, x1, #0, #31"),
    ("\x20\xf8\x40\x93", "sbfx x0, x1, #0, #63"),
    ("\x20\xfc\x40\x93", "sbfx x0, x1, #0, #64"),
    ("\x20\xfc\x41\x93", "sbfx x0, x1, #1, #63"),
    ("\x20\xfc\x42\x93", "sbfx x0, x1, #2, #62"),
    ("\x20\xfc\x43\x93", "sbfx x0, x1, #3, #61"),
    ("\x20\xfc\x60\x93", "sbfx x0, x1, #32, #32"),
    ("\x20\x4c\x4a\x93", "sbfx x0, x1, #10, #10"),
    ("\x20\x48\x49\x93", "sbfx x0, x1, #9, #10"),
    ("\x20\x40\x47\x93", "sbfx x0, x1, #7, #10"),
    ("\x20\x3c\x47\x93", "sbfx x0, x1, #7, #9"),

    ("\xc1\xfd\xbf\xd2", "movz x1, #0xffee, lsl #16"),
    ("\x42\xd5\xbd\xd2", "movz x2, #0xeeaa, lsl #16"),

    ("\x20\x00\x42\xfa", "ccmp x1, x2, 0, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x21\x00\x42\xfa", "ccmp x1, x2, 1, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x22\x00\x42\xfa", "ccmp x1, x2, 2, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x23\x00\x42\xfa", "ccmp x1, x2, 3, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x24\x00\x42\xfa", "ccmp x1, x2, 4, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x25\x00\x42\xfa", "ccmp x1, x2, 5, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x26\x00\x42\xfa", "ccmp x1, x2, 6, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x27\x00\x42\xfa", "ccmp x1, x2, 7, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x28\x00\x42\xfa", "ccmp x1, x2, 8, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x29\x00\x42\xfa", "ccmp x1, x2, 9, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2a\x00\x42\xfa", "ccmp x1, x2, 10, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2b\x00\x42\xfa", "ccmp x1, x2, 11, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2c\x00\x42\xfa", "ccmp x1, x2, 12, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2d\x00\x42\xfa", "ccmp x1, x2, 13, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2e\x00\x42\xfa", "ccmp x1, x2, 14, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2f\x00\x42\xfa", "ccmp x1, x2, 15, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\xc1\xfd\xbf\xd2", "movz x1, #0xffee, lsl #16"),
    ("\xc2\xfd\xbf\xd2", "movz x2, #0xffee, lsl #16"),

    ("\x20\x00\x42\xfa", "ccmp x1, x2, 0, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x21\x00\x42\xfa", "ccmp x1, x2, 1, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x22\x00\x42\xfa", "ccmp x1, x2, 2, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x23\x00\x42\xfa", "ccmp x1, x2, 3, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x24\x00\x42\xfa", "ccmp x1, x2, 4, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x25\x00\x42\xfa", "ccmp x1, x2, 5, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x26\x00\x42\xfa", "ccmp x1, x2, 6, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x27\x00\x42\xfa", "ccmp x1, x2, 7, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x28\x00\x42\xfa", "ccmp x1, x2, 8, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x29\x00\x42\xfa", "ccmp x1, x2, 9, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2a\x00\x42\xfa", "ccmp x1, x2, 10, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2b\x00\x42\xfa", "ccmp x1, x2, 11, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2c\x00\x42\xfa", "ccmp x1, x2, 12, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2d\x00\x42\xfa", "ccmp x1, x2, 13, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2e\x00\x42\xfa", "ccmp x1, x2, 14, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x2f\x00\x42\xfa", "ccmp x1, x2, 15, eq"),
    ("\xe0\x17\x9f\x9a", "cset x0, eq"),
    ("\xe0\xb7\x9f\x9a", "cset x0, ge"),
    ("\xe0\xd7\x9f\x9a", "cset x0, gt"),
    ("\xe0\x97\x9f\x9a", "cset x0, hi"),
    ("\xe0\x37\x9f\x9a", "cset x0, hs"),
    ("\xe0\xc7\x9f\x9a", "cset x0, le"),
    ("\xe0\x27\x9f\x9a", "cset x0, lo"),
    ("\xe0\x87\x9f\x9a", "cset x0, ls"),
    ("\xe0\xa7\x9f\x9a", "cset x0, lt"),
    ("\xe0\x57\x9f\x9a", "cset x0, mi"),
    ("\xe0\x07\x9f\x9a", "cset x0, ne"),
    ("\xe0\x47\x9f\x9a", "cset x0, pl"),
    ("\xe0\x67\x9f\x9a", "cset x0, vc"),
    ("\xe0\x77\x9f\x9a", "cset x0, vs"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x41\x14\x82\x9a", "cinc x1, x2, eq"),
    ("\x41\x04\x82\x9a", "cinc x1, x2, ne"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\xc1\xfd\xff\xd2", "movz x1, #0xffee, lsl #48"),
    ("\x81\xb9\xdb\xf2", "movk x1, #0xddcc, lsl #32"),
    ("\x41\x75\xb7\xf2", "movk x1, #0xbbaa, lsl #16"),
    ("\x01\x31\x93\xf2", "movk x1, #0x9988"),
    ("\x20\xfc\x40\xd3", "ubfiz x0, x1, #0, #64"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xf8\x7f\xd3", "ubfiz x0, x1, #1, #63"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xf4\x7e\xd3", "ubfiz x0, x1, #2, #62"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xf0\x7d\xd3", "ubfiz x0, x1, #3, #61"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xec\x7c\xd3", "ubfiz x0, x1, #4, #60"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xe8\x7b\xd3", "ubfiz x0, x1, #5, #59"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xe4\x7a\xd3", "ubfiz x0, x1, #6, #58"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xe0\x79\xd3", "ubfiz x0, x1, #7, #57"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\xdc\x78\xd3", "ubfiz x0, x1, #8, #56"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\x7c\x7a\xd3", "ubfiz x0, x1, #6, #32"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\x00\x78\xd3", "ubfiz x0, x1, #8, #1"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\x00\x41\xd3", "ubfiz x0, x1, #63, #1"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\x00\x18\x53", "ubfiz w0, w1, #8, #1"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\x00\x01\x53", "ubfiz w0, w1, #31, #1"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x00\x04\x00\xd1", "sub x0, x0, #1"),
    ("\x20\x7c\x00\x53", "ubfiz w0, w1, #0, #32"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\x08\xc2\x9a", "udiv x0, x1, x2"),
    ("\x40\x08\xc1\x9a", "udiv x0, x2, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\x02\x00\x80\xd2", "movz x2, #0"),
    ("\x20\x08\xc2\x9a", "udiv x0, x1, x2"),
    ("\x40\x08\xc1\x9a", "udiv x0, x2, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\x0c\xc2\x9a", "sdiv x0, x1, x2"),
    ("\x40\x0c\xc1\x9a", "sdiv x0, x2, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\x02\x00\x80\xd2", "movz x2, #0"),
    ("\x20\x0c\xc2\x9a", "sdiv x0, x1, x2"),
    ("\x40\x0c\xc1\x9a", "sdiv x0, x2, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\x7c\xa2\x9b", "umull x0, w1, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),
    ("\x00\x7c\xa2\x9b", "umull x0, w0, w2"),

    ("\xc1\xfd\xff\xd2", "movz x1, #0xffee, lsl #48"),
    ("\x81\xb9\xdb\xf2", "movk x1, #0xddcc, lsl #32"),
    ("\x41\x75\xb7\xf2", "movk x1, #0xbbaa, lsl #16"),
    ("\x01\x31\x93\xf2", "movk x1, #0x9988"),
    ("\x20\x7c\xc1\x9b", "umulh x0, x1, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),
    ("\x00\x7c\xc1\x9b", "umulh x0, x0, x1"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\xfc\xa2\x9b", "umnegl x0, w1, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),
    ("\x00\xfc\xa2\x9b", "umnegl x0, w0, w2"),

    ("\x41\x9a\x80\xd2", "movz x1, #1234"),
    ("\xc2\x88\x83\xd2", "movz x2, #7238"),
    ("\x20\x2c\xc2\x9a", "ror x0, x1, x2"),
    ("\x40\x2c\xc1\x9a", "ror x0, x2, x1"),
    ("\x40\x00\xc2\x93", "ror x0, x2, #0"),
    ("\x40\x04\xc2\x93", "ror x0, x2, #1"),
    ("\x40\x08\xc2\x93", "ror x0, x2, #2"),
    ("\x40\x0c\xc2\x93", "ror x0, x2, #3"),
    ("\x40\x10\xc2\x93", "ror x0, x2, #4"),
    ("\x40\xf8\xc2\x93", "ror x0, x2, #62"),
    ("\x40\xfc\xc2\x93", "ror x0, x2, #63"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x01\x00\x80\xd2", "mov x1, #0"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x41\x00\x80\xd2", "mov x1, #1 << 1"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x81\x00\x80\xd2", "mov x1, #1 << 2"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x01\x00\x82\xd2", "mov x1, #1 << 12"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x01\x00\x82\xd2", "mov x1, #1 << 12"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x01\x00\xb0\xd2", "mov x1, #1 << 31"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x21\x00\xc0\xd2", "mov x1, #1 << 32"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x41\x00\xc0\xd2", "mov x1, #1 << 33"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x01\x00\xe8\xd2", "mov x1, #1 << 62"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x01\x00\xf0\xd2", "mov x1, #1 << 63"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x00\x00\x80\x92", "movn x0, #0"),
    ("\x21\x00\x80\xd2", "mov x1, #1 << 64"),
    ("\x20\x10\xc0\xda", "clz x0, x1"),
    ("\x20\x10\xc0\x5a", "clz w0, w1"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\xfc\xdf\xc8", "ldar x5, [x1]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\xfc\xdf\xc8", "ldar x9, [x1]"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\xff\xdf\xc8", "ldar x11, [sp]"),
    ("\xff\xff\xdf\xc8", "ldar xzr, [sp]"),
    ("\xe7\xff\xdf\x88", "ldar w7, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\xfc\xdf\x08", "ldarb w5, [x1]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\xfc\xdf\x08", "ldarb w9, [x1]"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\xff\xdf\x08", "ldarb w11, [sp]"),
    ("\xff\xff\xdf\x08", "ldarb wzr, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\xfc\xdf\x48", "ldarh w5, [x1]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\xfc\xdf\x48", "ldarh w9, [x1]"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\xff\xdf\x48", "ldarh w11, [sp]"),
    ("\xff\xff\xdf\x48", "ldarh wzr, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\xfc\x5f\xc8", "ldaxr x5, [x1]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\xfc\x5f\xc8", "ldaxr x9, [x1]"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\xff\x5f\xc8", "ldaxr x11, [sp]"),
    ("\xff\xff\x5f\xc8", "ldaxr xzr, [sp]"),
    ("\xe7\xff\x5f\x88", "ldaxr w7, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\xfc\x5f\x08", "ldaxrb w5, [x1]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\xfc\x5f\x08", "ldaxrb w9, [x1]"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\xff\x5f\x08", "ldaxrb w11, [sp]"),
    ("\xff\xff\x5f\x08", "ldaxrb wzr, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x25\xfc\x5f\x48", "ldaxrh w5, [x1]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x29\xfc\x5f\x48", "ldaxrh w9, [x1]"),
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\xff\x5f\x48", "ldaxrh w11, [sp]"),
    ("\xff\xff\x5f\x48", "ldaxrh wzr, [sp]"),

    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x02\x02\x80\xd2", "movz x2, #16"),
    ("\x63\xa0\x84\xd2", "movz x3, #9475"),
    ("\x64\xa0\x84\xd2", "movz x4, #9475"),
    ("\xe5\x24\x81\xd2", "movz x5, #2343"),
    ("\xa6\xaf\x81\xd2", "movz x6, #3453"),
    ("\x87\x3a\x82\xd2", "movz x7, #4564"),
    ("\xe8\x16\x84\xd2", "movz x8, #8375"),
    ("\xe9\xc1\x84\xd2", "movz x9, #9743"),
    ("\xea\xaa\x82\xd2", "movz x10, #5463"),
    ("\x2b\xf8\x80\xd2", "movz x11, #1985"),
    ("\x25\xfc\x9f\xc8", "stlr x5, [x1]"),
    ("\x01\x06\xa0\xd2", "movz x1, #0x30, lsl #16"), # HEAP address
    ("\x21\xc8\x00\x91", "add x1, x1, #50"), # HEAP+50 address
    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x3f\x10\x00\x91", "add sp, x1, #4"),
    ("\xeb\xff\x9f\xc8", "stlr x11, [sp]"),
    ("\x25\x00\x00\xf8", "stur x5, [x1]"),
    ("\x26\x00\x00\x38", "sturb w6, [x1]"),
    ("\x27\x00\x00\x78", "sturh w7, [x1]"),
    ("\x29\xfc\x9f\xc8", "stlr x9, [x1]"),
    ("\x2a\xfc\x9f\x08", "stlrb w10, [x1]"),
    ("\x2b\xfc\x9f\x48", "stlrh w11, [x1]"),

    ("\x01\x04\xa0\xd2", "movz x1, #0x20, lsl #16"), # STACK address
    ("\x21\x30\x00\x91", "add x1, x1, #12"), # STACK+12
    ("\x20\x7c\x5f\xc8", "ldxr x0, [x1]"),
    ("\x21\x30\x00\x91", "add x1, x1, #12"), # STACK+24
    ("\x20\x7c\x5f\x08", "ldxrb w0, [x1]"),
    ("\x21\x30\x00\x91", "add x1, x1, #12"), # STACK+36
    ("\x20\x7c\x5f\x48", "ldxrh w0, [x1]"),

    ("\xc1\xfd\xff\xd2", "movz x1, #0xffee, lsl #48"),
    ("\x81\xb9\xdb\xf2", "movk x1, #0xddcc, lsl #32"),
    ("\x41\x75\xb7\xf2", "movk x1, #0xbbaa, lsl #16"),
    ("\x01\x31\x93\xf2", "movk x1, #0x9988"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x20\x0c\xc0\xda", "rev x0, x1"),
    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x20\x08\xc0\x5a", "rev w0, w1"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x20\x04\xc0\xda", "rev16 x0, x1"),
    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x20\x04\xc0\x5a", "rev16 w0, w1"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x20\x08\xc0\xda", "rev32 x0, x1"),

    ("\x00\x00\x80\xd2", "movz x0, #0"),
    ("\x20\x00\xc0\xda", "rbit x0, x1"),
    ("\x20\x00\xc0\x5a", "rbit w0, w1"),

    ("\x20\x00\x80\xd2", "movz x0, #1"),
    ("\x20\x00\xc0\xda", "rbit x0, x1"),
    ("\x20\x00\xc0\x5a", "rbit w0, w1"),
]

def emu_with_unicorn(opcode, istate):
    # Initialize emulator in aarch64 mode
    mu = Uc(UC_ARCH_ARM64, UC_MODE_ARM)

    # map memory for this emulation
    mu.mem_map(ADDR, SIZE)

    # write machine code to be emulated to memory
    index = 0
    for op, _ in CODE:
        mu.mem_write(ADDR+index, op)
        index += len(op)

    mu.mem_write(STACK,             bytes(istate['stack']))
    mu.mem_write(HEAP,              bytes(istate['heap']))
    mu.reg_write(UC_ARM64_REG_X0,   istate['x0'])
    mu.reg_write(UC_ARM64_REG_X1,   istate['x1'])
    mu.reg_write(UC_ARM64_REG_X2,   istate['x2'])
    mu.reg_write(UC_ARM64_REG_X3,   istate['x3'])
    mu.reg_write(UC_ARM64_REG_X4,   istate['x4'])
    mu.reg_write(UC_ARM64_REG_X5,   istate['x5'])
    mu.reg_write(UC_ARM64_REG_X6,   istate['x6'])
    mu.reg_write(UC_ARM64_REG_X7,   istate['x7'])
    mu.reg_write(UC_ARM64_REG_X8,   istate['x8'])
    mu.reg_write(UC_ARM64_REG_X9,   istate['x9'])
    mu.reg_write(UC_ARM64_REG_X10,  istate['x10'])
    mu.reg_write(UC_ARM64_REG_X11,  istate['x11'])
    mu.reg_write(UC_ARM64_REG_X12,  istate['x12'])
    mu.reg_write(UC_ARM64_REG_X13,  istate['x13'])
    mu.reg_write(UC_ARM64_REG_X14,  istate['x14'])
    mu.reg_write(UC_ARM64_REG_X15,  istate['x15'])
    mu.reg_write(UC_ARM64_REG_X16,  istate['x16'])
    mu.reg_write(UC_ARM64_REG_X17,  istate['x17'])
    mu.reg_write(UC_ARM64_REG_X18,  istate['x18'])
    mu.reg_write(UC_ARM64_REG_X19,  istate['x19'])
    mu.reg_write(UC_ARM64_REG_X20,  istate['x20'])
    mu.reg_write(UC_ARM64_REG_X21,  istate['x21'])
    mu.reg_write(UC_ARM64_REG_X22,  istate['x22'])
    mu.reg_write(UC_ARM64_REG_X23,  istate['x23'])
    mu.reg_write(UC_ARM64_REG_X24,  istate['x24'])
    mu.reg_write(UC_ARM64_REG_X25,  istate['x25'])
    mu.reg_write(UC_ARM64_REG_X26,  istate['x26'])
    mu.reg_write(UC_ARM64_REG_X27,  istate['x27'])
    mu.reg_write(UC_ARM64_REG_X28,  istate['x28'])
    mu.reg_write(UC_ARM64_REG_X29,  istate['x29'])
    mu.reg_write(UC_ARM64_REG_X30,  istate['x30'])
    mu.reg_write(UC_ARM64_REG_PC,   istate['pc'])
    mu.reg_write(UC_ARM64_REG_SP,   istate['sp'])
    mu.reg_write(UC_ARM64_REG_NZCV, istate['n'] << 31 | istate['z'] << 30 | istate['c'] << 29 | istate['v'] << 28)

    # emulate code in infinite time & unlimited instructions
    mu.emu_start(istate['pc'], istate['pc'] + len(opcode))

    ostate = {
        "stack": mu.mem_read(STACK, 0x100),
        "heap":  mu.mem_read(HEAP, 0x100),
        "x0":    mu.reg_read(UC_ARM64_REG_X0),
        "x1":    mu.reg_read(UC_ARM64_REG_X1),
        "x2":    mu.reg_read(UC_ARM64_REG_X2),
        "x3":    mu.reg_read(UC_ARM64_REG_X3),
        "x4":    mu.reg_read(UC_ARM64_REG_X4),
        "x5":    mu.reg_read(UC_ARM64_REG_X5),
        "x6":    mu.reg_read(UC_ARM64_REG_X6),
        "x7":    mu.reg_read(UC_ARM64_REG_X7),
        "x8":    mu.reg_read(UC_ARM64_REG_X8),
        "x9":    mu.reg_read(UC_ARM64_REG_X9),
        "x10":   mu.reg_read(UC_ARM64_REG_X10),
        "x11":   mu.reg_read(UC_ARM64_REG_X11),
        "x12":   mu.reg_read(UC_ARM64_REG_X12),
        "x13":   mu.reg_read(UC_ARM64_REG_X13),
        "x14":   mu.reg_read(UC_ARM64_REG_X14),
        "x15":   mu.reg_read(UC_ARM64_REG_X15),
        "x16":   mu.reg_read(UC_ARM64_REG_X16),
        "x17":   mu.reg_read(UC_ARM64_REG_X17),
        "x18":   mu.reg_read(UC_ARM64_REG_X18),
        "x19":   mu.reg_read(UC_ARM64_REG_X19),
        "x20":   mu.reg_read(UC_ARM64_REG_X20),
        "x21":   mu.reg_read(UC_ARM64_REG_X21),
        "x22":   mu.reg_read(UC_ARM64_REG_X22),
        "x23":   mu.reg_read(UC_ARM64_REG_X23),
        "x24":   mu.reg_read(UC_ARM64_REG_X24),
        "x25":   mu.reg_read(UC_ARM64_REG_X25),
        "x26":   mu.reg_read(UC_ARM64_REG_X26),
        "x27":   mu.reg_read(UC_ARM64_REG_X27),
        "x28":   mu.reg_read(UC_ARM64_REG_X28),
        "x29":   mu.reg_read(UC_ARM64_REG_X29),
        "x30":   mu.reg_read(UC_ARM64_REG_X30),
        "x30":   mu.reg_read(UC_ARM64_REG_X30),
        "pc":    mu.reg_read(UC_ARM64_REG_PC),
        "sp":    mu.reg_read(UC_ARM64_REG_SP),
        "n":   ((mu.reg_read(UC_ARM64_REG_NZCV) >> 31) & 1),
        "z":   ((mu.reg_read(UC_ARM64_REG_NZCV) >> 30) & 1),
        "c":   ((mu.reg_read(UC_ARM64_REG_NZCV) >> 29) & 1),
        "v":   ((mu.reg_read(UC_ARM64_REG_NZCV) >> 28) & 1),
    }
    return ostate

def emu_with_triton(opcode, istate):
    ctx = TritonContext()
    ctx.setArchitecture(ARCH.AARCH64)

    inst = Instruction(opcode)
    inst.setAddress(istate['pc'])

    ctx.setConcreteMemoryAreaValue(STACK,           bytes(istate['stack']))
    ctx.setConcreteMemoryAreaValue(HEAP,            bytes(istate['heap']))
    ctx.setConcreteRegisterValue(ctx.registers.x0,  istate['x0'])
    ctx.setConcreteRegisterValue(ctx.registers.x1,  istate['x1'])
    ctx.setConcreteRegisterValue(ctx.registers.x2,  istate['x2'])
    ctx.setConcreteRegisterValue(ctx.registers.x3,  istate['x3'])
    ctx.setConcreteRegisterValue(ctx.registers.x4,  istate['x4'])
    ctx.setConcreteRegisterValue(ctx.registers.x5,  istate['x5'])
    ctx.setConcreteRegisterValue(ctx.registers.x6,  istate['x6'])
    ctx.setConcreteRegisterValue(ctx.registers.x7,  istate['x7'])
    ctx.setConcreteRegisterValue(ctx.registers.x8,  istate['x8'])
    ctx.setConcreteRegisterValue(ctx.registers.x9,  istate['x9'])
    ctx.setConcreteRegisterValue(ctx.registers.x10, istate['x10'])
    ctx.setConcreteRegisterValue(ctx.registers.x11, istate['x11'])
    ctx.setConcreteRegisterValue(ctx.registers.x12, istate['x12'])
    ctx.setConcreteRegisterValue(ctx.registers.x13, istate['x13'])
    ctx.setConcreteRegisterValue(ctx.registers.x14, istate['x14'])
    ctx.setConcreteRegisterValue(ctx.registers.x15, istate['x15'])
    ctx.setConcreteRegisterValue(ctx.registers.x16, istate['x16'])
    ctx.setConcreteRegisterValue(ctx.registers.x17, istate['x17'])
    ctx.setConcreteRegisterValue(ctx.registers.x18, istate['x18'])
    ctx.setConcreteRegisterValue(ctx.registers.x19, istate['x19'])
    ctx.setConcreteRegisterValue(ctx.registers.x20, istate['x20'])
    ctx.setConcreteRegisterValue(ctx.registers.x21, istate['x21'])
    ctx.setConcreteRegisterValue(ctx.registers.x22, istate['x22'])
    ctx.setConcreteRegisterValue(ctx.registers.x23, istate['x23'])
    ctx.setConcreteRegisterValue(ctx.registers.x24, istate['x24'])
    ctx.setConcreteRegisterValue(ctx.registers.x25, istate['x25'])
    ctx.setConcreteRegisterValue(ctx.registers.x26, istate['x26'])
    ctx.setConcreteRegisterValue(ctx.registers.x27, istate['x27'])
    ctx.setConcreteRegisterValue(ctx.registers.x28, istate['x28'])
    ctx.setConcreteRegisterValue(ctx.registers.x29, istate['x29'])
    ctx.setConcreteRegisterValue(ctx.registers.x30, istate['x30'])
    ctx.setConcreteRegisterValue(ctx.registers.pc,  istate['pc'])
    ctx.setConcreteRegisterValue(ctx.registers.sp,  istate['sp'])
    ctx.setConcreteRegisterValue(ctx.registers.n,   istate['n'])
    ctx.setConcreteRegisterValue(ctx.registers.z,   istate['z'])
    ctx.setConcreteRegisterValue(ctx.registers.c,   istate['c'])
    ctx.setConcreteRegisterValue(ctx.registers.v,   istate['v'])

    ctx.processing(inst)

    #print
    #print inst
    #for x in inst.getSymbolicExpressions():
    #    print x
    #print

    ostate = {
        "stack": ctx.getConcreteMemoryAreaValue(STACK, 0x100),
        "heap":  ctx.getConcreteMemoryAreaValue(HEAP, 0x100),
        "x0":    ctx.getSymbolicRegisterValue(ctx.registers.x0),
        "x1":    ctx.getSymbolicRegisterValue(ctx.registers.x1),
        "x2":    ctx.getSymbolicRegisterValue(ctx.registers.x2),
        "x3":    ctx.getSymbolicRegisterValue(ctx.registers.x3),
        "x4":    ctx.getSymbolicRegisterValue(ctx.registers.x4),
        "x5":    ctx.getSymbolicRegisterValue(ctx.registers.x5),
        "x6":    ctx.getSymbolicRegisterValue(ctx.registers.x6),
        "x7":    ctx.getSymbolicRegisterValue(ctx.registers.x7),
        "x8":    ctx.getSymbolicRegisterValue(ctx.registers.x8),
        "x9":    ctx.getSymbolicRegisterValue(ctx.registers.x9),
        "x10":   ctx.getSymbolicRegisterValue(ctx.registers.x10),
        "x11":   ctx.getSymbolicRegisterValue(ctx.registers.x11),
        "x12":   ctx.getSymbolicRegisterValue(ctx.registers.x12),
        "x13":   ctx.getSymbolicRegisterValue(ctx.registers.x13),
        "x14":   ctx.getSymbolicRegisterValue(ctx.registers.x14),
        "x15":   ctx.getSymbolicRegisterValue(ctx.registers.x15),
        "x16":   ctx.getSymbolicRegisterValue(ctx.registers.x16),
        "x17":   ctx.getSymbolicRegisterValue(ctx.registers.x17),
        "x18":   ctx.getSymbolicRegisterValue(ctx.registers.x18),
        "x19":   ctx.getSymbolicRegisterValue(ctx.registers.x19),
        "x20":   ctx.getSymbolicRegisterValue(ctx.registers.x20),
        "x21":   ctx.getSymbolicRegisterValue(ctx.registers.x21),
        "x22":   ctx.getSymbolicRegisterValue(ctx.registers.x22),
        "x23":   ctx.getSymbolicRegisterValue(ctx.registers.x23),
        "x24":   ctx.getSymbolicRegisterValue(ctx.registers.x24),
        "x25":   ctx.getSymbolicRegisterValue(ctx.registers.x25),
        "x26":   ctx.getSymbolicRegisterValue(ctx.registers.x26),
        "x27":   ctx.getSymbolicRegisterValue(ctx.registers.x27),
        "x28":   ctx.getSymbolicRegisterValue(ctx.registers.x28),
        "x29":   ctx.getSymbolicRegisterValue(ctx.registers.x29),
        "x30":   ctx.getSymbolicRegisterValue(ctx.registers.x30),
        "x30":   ctx.getSymbolicRegisterValue(ctx.registers.x30),
        "pc":    ctx.getSymbolicRegisterValue(ctx.registers.pc),
        "sp":    ctx.getSymbolicRegisterValue(ctx.registers.sp),
        "n":     ctx.getSymbolicRegisterValue(ctx.registers.n),
        "z":     ctx.getSymbolicRegisterValue(ctx.registers.z),
        "c":     ctx.getSymbolicRegisterValue(ctx.registers.c),
        "v":     ctx.getSymbolicRegisterValue(ctx.registers.v),
    }
    return ostate

def diff_state(state1, state2):
    for k, v in state1.items():
        if (k == 'heap' or k == 'stack') and v != state2[k]:
            print '\t%s: (UC) != (TT)' %(k)
        elif not (k == 'heap' or k == 'stack') and v != state2[k]:
            print '\t%s: %#x (UC) != %#x (TT)' %(k, v, state2[k])
    return

if __name__ == '__main__':
    # initial state
    state = {
        "stack": "".join([chr(255 - i) for i in range(256)]),
        "heap":  "".join([chr(i) for i in range(256)]),
        "x0":    0,
        "x1":    0,
        "x2":    0,
        "x3":    0,
        "x4":    0,
        "x5":    0,
        "x6":    0,
        "x7":    0,
        "x8":    0,
        "x9":    0,
        "x10":   0,
        "x11":   0,
        "x12":   0,
        "x13":   0,
        "x14":   0,
        "x15":   0,
        "x16":   0,
        "x17":   0,
        "x18":   0,
        "x19":   0,
        "x20":   0,
        "x21":   0,
        "x22":   0,
        "x23":   0,
        "x24":   0,
        "x25":   0,
        "x26":   0,
        "x27":   0,
        "x28":   0,
        "x29":   0,
        "x30":   0,
        "x30":   0,
        "pc":    ADDR,
        "sp":    STACK,
        "n":     0,
        "z":     0,
        "c":     0,
        "v":     0,
    }

    for opcode, disassembly in CODE:
        try:
            uc_state = emu_with_unicorn(opcode, state)
            tt_state = emu_with_triton(opcode, state)
        except Exception, e:
            print '[KO] %s' %(disassembly)
            print '\t%s' %(e)
            sys.exit(-1)

        if uc_state != tt_state:
            print '[KO] %s' %(disassembly)
            diff_state(uc_state, tt_state)
            sys.exit(-1)

        print '[OK] %s' %(disassembly)
        state = tt_state

    sys.exit(0)
